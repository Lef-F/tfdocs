package gitlab

import (
	"fmt"

	"github.com/cycloidio/tfdocs/resource"
)

var (
	Resources = []*resource.Resource{

		&resource.Resource{
			Name:             "",
			Type:             "gitlab_application",
			Category:         "Resources",
			ShortDescription: `The gitlab_application resource allows to manage the lifecycle of applications in gitlab. ~> In order to use a user for a user to create an application, they must have admin privileges at the instance level. To create an OIDC application, a scope of "openid". Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/applications.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_application_settings",
			Category:         "Resources",
			ShortDescription: `The gitlab_application_settings resource allows to manage the GitLab application settings. ~> This is an experimental resource. By nature it doesn't properly fit into how Terraform resources are meant to work. Feel free to join the discussion https://gitlab.com/gitlab-org/terraform-provider-gitlab/issues/957 if you have any ideas or questions regarding this resource. ~> All gitlab_application_settings use the same ID gitlab. !> This resource does not implement any destroy logic, it's a no-op at this point. It's also not possible to revert to the previous settings. -> Requires at administrative privileges on GitLab. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/settings.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_branch",
			Category:         "Resources",
			ShortDescription: `The gitlab_branch resource allows to manage the lifecycle of a repository branch. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/branches.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_branch_protection",
			Category:         "Resources",
			ShortDescription: `The gitlab_branch_protection resource allows to manage the lifecycle of a protected branch of a repository. ~> Branch Protection Behavior for the default branch Depending on the GitLab instance, group or project setting the default branch of a project is created automatically by GitLab behind the scenes. Due to some https://gitlab.com/gitlab-org/terraform-provider-gitlab/issues/792 limitations https://discuss.hashicorp.com/t/ignore-the-order-of-a-complex-typed-list/42242 in the Terraform Provider SDK and the GitLab API, when creating a new project and trying to manage the branch protection setting for its default branch the gitlab_branch_protection resource will automatically take ownership of the default branch without an explicit import by unprotecting and properly protecting it again. Having multiple gitlab_branch_protection resources for the same project and default branch will result in them overriding each other - make sure to only have a single one. This behavior might change in the future. ~> The allowed_to_push, allowed_to_merge, allowed_to_unprotect, unprotect_access_level and code_owner_approval_required attributes require a GitLab Enterprise instance. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/protected_branches.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_cluster_agent",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_cluster_agent_token",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_deploy_key",
			Category:         "Resources",
			ShortDescription: `The gitlab_deploy_key resource allows to manage the lifecycle of a deploy key. -> To enable an already existing deploy key for another project use the gitlab_project_deploy_key resource. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/deploy_keys.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_deploy_key_enable",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_deploy_token",
			Category:         "Resources",
			ShortDescription: `The gitlab_deploy_token resource allows to manage the lifecycle of group and project deploy tokens. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/deploy_tokens.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group",
			Category:         "Resources",
			ShortDescription: `The gitlab_group resource allows to manage the lifecycle of a group. -> On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use this provider nor the API to do this. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/groups.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_access_token",
			Category:         "Resources",
			ShortDescription: `The gitlab_group_accesstoken resource allows to manage the lifecycle of a group access token. -> Group Access Token were introduced in GitLab 14.7 Upstream API: GitLab REST API https://docs.gitlab.com/ee/api/group_access_tokens.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_badge",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_cluster",
			Category:         "Resources",
			ShortDescription: `The gitlab_group_cluster resource allows to manage the lifecycle of a group cluster. ~> This is deprecated GitLab feature since 14.5 Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/group_clusters.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_custom_attribute",
			Category:         "Resources",
			ShortDescription: `The gitlab_group_custom_attribute resource allows to manage custom attributes for a group. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/custom_attributes.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_hook",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_label",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_ldap_link",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_membership",
			Category:         "Resources",
			ShortDescription: `The gitlab_group_membership resource allows to manage the lifecycle of a users group membership. -> If a group should grant membership to another group use the gitlab_group_share_group resource instead. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/members.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_project_file_template",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_saml_link",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_share_group",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_group_variable",
			Category:         "Resources",
			ShortDescription: `The gitlab_group_variable resource allows to manage the lifecycle of a CI/CD variable for a group. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/group_level_variables.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_instance_cluster",
			Category:         "Resources",
			ShortDescription: `The gitlab_instance_cluster resource allows to manage the lifecycle of an instance cluster. ~> This is deprecated GitLab feature since 14.5 Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/instance_clusters.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_instance_variable",
			Category:         "Resources",
			ShortDescription: `The gitlab_instance_variable resource allows to manage the lifecycle of an instance-level CI/CD variable. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/instance_level_ci_variables.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_label",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_managed_license",
			Category:         "Resources",
			ShortDescription: `The gitlab_managed_license resource allows to manage the lifecycle of a managed license. -> This resource requires a GitLab Enterprise instance. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/managed_licenses.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_pages_domain",
			Category:         "Resources",
			ShortDescription: `The gitlab_pages_domain resource allows connecting custom domains and TLS certificates in GitLab Pages. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/pages_domains.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_personal_access_token",
			Category:         "Resources",
			ShortDescription: `The gitlab_personal_access_token resource allows to manage the lifecycle of a personal access token for a specified user. -> This resource requires administration privileges. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/personal_access_tokens.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_pipeline_schedule",
			Category:         "Resources",
			ShortDescription: `The gitlab_pipeline_schedule resource allows to manage the lifecycle of a scheduled pipeline. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/pipeline_schedules.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_pipeline_schedule_variable",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_pipeline_trigger",
			Category:         "Resources",
			ShortDescription: `The gitlab_pipeline_trigger resource allows to manage the lifecycle of a pipeline trigger. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/pipeline_triggers.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project",
			Category:         "Resources",
			ShortDescription: `The gitlab_project resource allows to manage the lifecycle of a project. A project can either be created in a group or user namespace. -> Default Branch Protection Workaround Projects are created with default branch protection. Since this default branch protection is not currently managed via Terraform, to workaround this limitation, you can remove the default branch protection via the API and create your desired Terraform managed branch protection. In the gitlab_project resource, define a local-exec provisioner which invokes the /projects/:id/protected_branches/:name API via curl to delete the branch protection on the default branch using a DELETE request. Then define the desired branch protection using the gitlab_branch_protection resource. Upstream API: GitLab REST API docs https://docs.gitlab.com/ce/api/projects.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_access_token",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_access_token resource allows to manage the lifecycle of a project access token. Upstream API: GitLab API docs https://docs.gitlab.com/ee/api/project_access_tokens.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_approval_rule",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_badge",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_cluster",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_cluster resource allows to manage the lifecycle of a project cluster. ~> This is deprecated GitLab feature since 14.5 Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/project_clusters.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_custom_attribute",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_custom_attribute resource allows to manage custom attributes for a project. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/custom_attributes.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_environment",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_environment resource allows to manage the lifecycle of an environment in a project. -> During a terraform destroy this resource by default will not attempt to stop the environment first. An environment is required to be in a stopped state before a deletetion of the environment can occur. Set the stop_before_destroy flag to attempt to automatically stop the environment before deletion. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/environments.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_freeze_period",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_freeze_period resource allows to manage the lifecycle of a freeze period for a project. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/freeze_periods.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_hook",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_issue",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_issue resource allows to manage the lifecycle of an issue within a project. -> During a terraform destroy this resource will close the issue. Set the deleteondestroy flag to true to delete the issue instead of closing it. ~> Experimental While the base functionality of this resource works, it may be subject to minor change. Upstream API: GitLab API docs https://docs.gitlab.com/ee/api/issues.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_issue_board",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_issue_board resource allows to manage the lifecycle of a Project Issue Board. ~> NOTE: If the board lists are changed all lists will be recreated. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/boards.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_level_mr_approvals",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_membership",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_membership resource allows to manage the lifecycle of a users project membership. -> If a project should grant membership to an entire group use the gitlab_project_share_group resource instead. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/members.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_milestone",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_milestone resource allows to manage the lifecycle of a project milestone. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/milestones.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_mirror",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_mirror resource allows to manage the lifecycle of a project mirror. This is for pushing changes to a remote repository. Pull Mirroring can be configured using a combination of the importurl, mirror, and mirrortriggerbuilds properties on the gitlabproject resource. -> Destroy Behavior GitLab 14.10 introduced an API endpoint to delete a project mirror. Therefore, for GitLab 14.10 and newer the project mirror will be destroyed when the resource is destroyed. For older versions, the mirror will be disabled and the resource will be destroyed. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/remote_mirrors.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_protected_environment",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_protected_environment resource allows to manage the lifecycle of a protected environment in a project. ~> In order to use a user or group in the deploy_access_levels configuration, you need to make sure that users have access to the project and groups must have this project shared. You may use the gitlab_project_membership and gitlab_project_shared_group resources to achieve this. Unfortunately, the GitLab API does not complain about users and groups without access to the project and just ignores those. In case this happens you will get perpetual state diffs. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/protected_environments.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_runner_enablement",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_share_group",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_tag",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_tag resource allows to manage the lifecycle of a tag in a project. Upstream API: GitLab API docs https://docs.gitlab.com/ee/api/tags.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_project_variable",
			Category:         "Resources",
			ShortDescription: `The gitlab_project_variable resource allows to manage the lifecycle of a CI/CD variable for a project. ~> Important: If your GitLab version is older than 13.4, you may see nondeterministic behavior when updating or deleting gitlabprojectvariable resources with non-unique keys, for example if there is another variable with the same key and different environment scope. See this GitLab issue https://gitlab.com/gitlab-org/gitlab/-/issues/9912. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/project_level_variables.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_release_link",
			Category:         "Resources",
			ShortDescription: `The gitlab_release_link resource allows to manage the lifecycle of a release link. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/releases/links.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_repository_file",
			Category:         "Resources",
			ShortDescription: `The gitlab_repository_file resource allows to manage the lifecycle of a file within a repository. -> Timeouts Default timeout for Create, Update and Delete is one minute and can be configured in the timeouts block. -> Implementation Detail GitLab is unable to handle concurrent calls to the GitLab repository files API for the same project. Therefore, this resource queues every call to the repository files API no matter of the project, which may slow down the terraform execution time for some configurations. In addition, retries are performed in case a refresh is required because another application changed the repository at the same time. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/repository_files.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_runner",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_service_custom_issue_tracker",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_service_emails_on_push",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_service_external_wiki",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_service_github",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_service_jira",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_service_microsoft_teams",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_service_pipelines_email",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_service_slack",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_system_hook",
			Category:         "Resources",
			ShortDescription: `The gitlab_system_hook resource allows to manage the lifecycle of a system hook. -> This resource requires GitLab 14.9 Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/system_hooks.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_tag_protection",
			Category:         "Resources",
			ShortDescription: `The gitlab_tag_protection resource allows to manage the lifecycle of a tag protection. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/protected_tags.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_topic",
			Category:         "Resources",
			ShortDescription: `The gitlab_topic resource allows to manage the lifecycle of topics that are then assignable to projects. -> Topics are the successors for project tags. Aside from avoiding terminology collisions with Git tags, they are more descriptive and better searchable. ~> Deleting a topic was implemented in GitLab 14.9. For older versions of GitLab set soft_destroy = true to empty out a topic instead of deleting it. Upstream API: GitLab REST API docs for topics https://docs.gitlab.com/ee/api/topics.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_user",
			Category:         "Resources",
			ShortDescription: `The gitlab_user resource allows to manage the lifecycle of a user. -> the provider needs to be configured with admin-level access for this resource to work. -> You must specify either password or reset_password. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/users.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_user_custom_attribute",
			Category:         "Resources",
			ShortDescription: `The gitlab_user_custom_attribute resource allows to manage custom attributes for a user. Upstream API: GitLab REST API docs https://docs.gitlab.com/ee/api/custom_attributes.html`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_user_gpgkey",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "gitlab_user_sshkey",
			Category:         "Resources",
			ShortDescription: ``,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
	}

	resourcesMap = map[string]int{

		"gitlab_application":                   0,
		"gitlab_application_settings":          1,
		"gitlab_branch":                        2,
		"gitlab_branch_protection":             3,
		"gitlab_cluster_agent":                 4,
		"gitlab_cluster_agent_token":           5,
		"gitlab_deploy_key":                    6,
		"gitlab_deploy_key_enable":             7,
		"gitlab_deploy_token":                  8,
		"gitlab_group":                         9,
		"gitlab_group_access_token":            10,
		"gitlab_group_badge":                   11,
		"gitlab_group_cluster":                 12,
		"gitlab_group_custom_attribute":        13,
		"gitlab_group_hook":                    14,
		"gitlab_group_label":                   15,
		"gitlab_group_ldap_link":               16,
		"gitlab_group_membership":              17,
		"gitlab_group_project_file_template":   18,
		"gitlab_group_saml_link":               19,
		"gitlab_group_share_group":             20,
		"gitlab_group_variable":                21,
		"gitlab_instance_cluster":              22,
		"gitlab_instance_variable":             23,
		"gitlab_label":                         24,
		"gitlab_managed_license":               25,
		"gitlab_pages_domain":                  26,
		"gitlab_personal_access_token":         27,
		"gitlab_pipeline_schedule":             28,
		"gitlab_pipeline_schedule_variable":    29,
		"gitlab_pipeline_trigger":              30,
		"gitlab_project":                       31,
		"gitlab_project_access_token":          32,
		"gitlab_project_approval_rule":         33,
		"gitlab_project_badge":                 34,
		"gitlab_project_cluster":               35,
		"gitlab_project_custom_attribute":      36,
		"gitlab_project_environment":           37,
		"gitlab_project_freeze_period":         38,
		"gitlab_project_hook":                  39,
		"gitlab_project_issue":                 40,
		"gitlab_project_issue_board":           41,
		"gitlab_project_level_mr_approvals":    42,
		"gitlab_project_membership":            43,
		"gitlab_project_milestone":             44,
		"gitlab_project_mirror":                45,
		"gitlab_project_protected_environment": 46,
		"gitlab_project_runner_enablement":     47,
		"gitlab_project_share_group":           48,
		"gitlab_project_tag":                   49,
		"gitlab_project_variable":              50,
		"gitlab_release_link":                  51,
		"gitlab_repository_file":               52,
		"gitlab_runner":                        53,
		"gitlab_service_custom_issue_tracker":  54,
		"gitlab_service_emails_on_push":        55,
		"gitlab_service_external_wiki":         56,
		"gitlab_service_github":                57,
		"gitlab_service_jira":                  58,
		"gitlab_service_microsoft_teams":       59,
		"gitlab_service_pipelines_email":       60,
		"gitlab_service_slack":                 61,
		"gitlab_system_hook":                   62,
		"gitlab_tag_protection":                63,
		"gitlab_topic":                         64,
		"gitlab_user":                          65,
		"gitlab_user_custom_attribute":         66,
		"gitlab_user_gpgkey":                   67,
		"gitlab_user_sshkey":                   68,
	}
)

func GetResource(r string) (*resource.Resource, error) {
	rs, ok := resourcesMap[r]
	if !ok {
		return nil, fmt.Errorf("resource %q not found", r)
	}
	return Resources[rs], nil
}
