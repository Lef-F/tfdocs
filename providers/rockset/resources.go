package rockset

import (
	"fmt"

	"github.com/cycloidio/tfdocs/resource"
)

var (
	Resources = []*resource.Resource{

		&resource.Resource{
			Name:             "",
			Type:             "rockset_alias",
			Category:         "Resources",
			ShortDescription: `Manages an alias for a set of collections.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_api_key",
			Category:         "Resources",
			ShortDescription: `Manage a Rockset Api Key. Can be used together with roles to scope the actions the api key can take.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_collection",
			Category:         "Resources",
			ShortDescription: `Manages a basic collection with no sources. Usually used for the write api.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_dynamodb_collection",
			Category:         "Resources",
			ShortDescription: `Manages a collection with an DynamoDB source attached.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_dynamodb_integration",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset DynamoDB Integration.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_gcs_collection",
			Category:         "Resources",
			ShortDescription: `Manages a collection with an GCS source attached.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_gcs_integration",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset GCS Integration.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_kafka_collection",
			Category:         "Resources",
			ShortDescription: `Manages a collection created from a Kafka source. The use_v3 field must match the integration which the collection is created from.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_kafka_integration",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset Kafka Integration. If the integration is connected with Confluent Cloud, there is a Terraform provider https://registry.terraform.io/providers/confluentinc/confluent/latest/docs which can be used to configure the Confluent Cloud side of the integration.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_kinesis_collection",
			Category:         "Resources",
			ShortDescription: `Manages a collection with an Kinesis source attached.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_kinesis_integration",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset Kinesis Integration.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_mongodb_collection",
			Category:         "Resources",
			ShortDescription: `Manages a collection with an MongoDB source attached.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_mongodb_integration",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset MongoDB Integration.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_query_lambda",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset Query Lambda.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_query_lambda_tag",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset Query Lambda Tag.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_role",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset Role https://rockset.com/docs/iam/.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_s3_collection",
			Category:         "Resources",
			ShortDescription: `Manages a collection with on or more S3 sources attached. Uses an S3 integration to access the S3 bucket. If no integration is provided, only data in public buckets are accessible.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_s3_integration",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset S3 Integration.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_user",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset User. First and last name can only be managed for users who have accepted the invite, i.e. when the state is ACCEPTED.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_view",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset view.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "rockset_workspace",
			Category:         "Resources",
			ShortDescription: `Manages a Rockset workspace.`,
			Description:      ``,
			Keywords:         []string{},
			Arguments:        []resource.Attribute{},
			Attributes:       []resource.Attribute{},
		},
	}

	resourcesMap = map[string]int{

		"rockset_alias":                0,
		"rockset_api_key":              1,
		"rockset_collection":           2,
		"rockset_dynamodb_collection":  3,
		"rockset_dynamodb_integration": 4,
		"rockset_gcs_collection":       5,
		"rockset_gcs_integration":      6,
		"rockset_kafka_collection":     7,
		"rockset_kafka_integration":    8,
		"rockset_kinesis_collection":   9,
		"rockset_kinesis_integration":  10,
		"rockset_mongodb_collection":   11,
		"rockset_mongodb_integration":  12,
		"rockset_query_lambda":         13,
		"rockset_query_lambda_tag":     14,
		"rockset_role":                 15,
		"rockset_s3_collection":        16,
		"rockset_s3_integration":       17,
		"rockset_user":                 18,
		"rockset_view":                 19,
		"rockset_workspace":            20,
	}
)

func GetResource(r string) (*resource.Resource, error) {
	rs, ok := resourcesMap[r]
	if !ok {
		return nil, fmt.Errorf("resource %q not found", r)
	}
	return Resources[rs], nil
}
