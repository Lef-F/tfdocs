package grafana

import (
	"fmt"

	"github.com/cycloidio/tfdocs/resource"
)

var (
	Resources = []*resource.Resource{

		&resource.Resource{
			Name:             "",
			Type:             "grafana_alert_notification",
			Category:         "Resources",
			ShortDescription: `The grafana_alert_notification resource allows a Grafana Alert Notification channel to be created.`,
			Description:      ``,
			Keywords: []string{
				"alert",
				"notification",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "name",
					Description: `(Required) The name of the alert notification channel.`,
				},
				resource.Attribute{
					Name:        "type",
					Description: `(Required) The type of the alert notification channel.`,
				},
				resource.Attribute{
					Name:        "is_default",
					Description: `(Optional) Is this the default channel for all your alerts.`,
				},
				resource.Attribute{
					Name:        "send_reminder",
					Description: `(Optional) Whether to send reminders for triggered alerts.`,
				},
				resource.Attribute{
					Name:        "frequency",
					Description: `(Optional) Frequency of alert reminders. Frequency must be set if reminders are enabled.`,
				},
				resource.Attribute{
					Name:        "disable_resolve_message",
					Description: `(Optional) Whether to disable sending resolve messages.`,
				},
				resource.Attribute{
					Name:        "settings",
					Description: `(Optional) Additional settings, for full reference lookup [Grafana HTTP API documentation](https://grafana.com/docs/grafana/latest/http_api/alerting_notification_channels/).`,
				},
				resource.Attribute{
					Name:        "id",
					Description: `The ID of the resource`,
				},
			},
			Attributes: []resource.Attribute{
				resource.Attribute{
					Name:        "id",
					Description: `The ID of the resource`,
				},
			},
		},
		&resource.Resource{
			Name:             "",
			Type:             "grafana_dashboard",
			Category:         "Resources",
			ShortDescription: `The grafana_dashboard resource allows a Grafana dashboard to be created.`,
			Description:      ``,
			Keywords: []string{
				"dashboard",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "config_json",
					Description: `(Required) The JSON configuration for the dashboard.`,
				},
				resource.Attribute{
					Name:        "folder",
					Description: `(Optional, Forces new resource) The internal id of the folder in Grafana in which to place the dashboard. ## Attributes Reference In addition to all arguments above, the following attributes are exported:`,
				},
				resource.Attribute{
					Name:        "slug",
					Description: `A URL "slug" for this dashboard, generated by Grafana by removing certain characters from the dashboard name given as part of the ` + "`" + `config_json` + "`" + ` argument. This can be used to generate the URL for a dashboard.`,
				},
				resource.Attribute{
					Name:        "dashboard_id",
					Description: `The numeric ID of the dashboard computed by Grafana. ## Import Existing dashboards can be imported using the dashboard "slug" which can be obtained from the url of the dashboard in Grafana (e.g. ` + "`" + `https://grafana.mydomain.com/d/abcdef-gh/dashboard-slug` + "`" + `) ` + "`" + `` + "`" + `` + "`" + ` $ terraform import grafana_dashboard.dashboard_name {dashboard_slug} ` + "`" + `` + "`" + `` + "`" + ``,
				},
			},
			Attributes: []resource.Attribute{
				resource.Attribute{
					Name:        "slug",
					Description: `A URL "slug" for this dashboard, generated by Grafana by removing certain characters from the dashboard name given as part of the ` + "`" + `config_json` + "`" + ` argument. This can be used to generate the URL for a dashboard.`,
				},
				resource.Attribute{
					Name:        "dashboard_id",
					Description: `The numeric ID of the dashboard computed by Grafana. ## Import Existing dashboards can be imported using the dashboard "slug" which can be obtained from the url of the dashboard in Grafana (e.g. ` + "`" + `https://grafana.mydomain.com/d/abcdef-gh/dashboard-slug` + "`" + `) ` + "`" + `` + "`" + `` + "`" + ` $ terraform import grafana_dashboard.dashboard_name {dashboard_slug} ` + "`" + `` + "`" + `` + "`" + ``,
				},
			},
		},
		&resource.Resource{
			Name:             "",
			Type:             "grafana_dashboard_permission",
			Category:         "Resources",
			ShortDescription: `The grafana_dashboard_permission resource allows a Grafana dashboard's permissions to be maintained`,
			Description:      ``,
			Keywords: []string{
				"dashboard",
				"permission",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "dashboard_id",
					Description: `(Required) The ID of the dashboard`,
				},
				resource.Attribute{
					Name:        "permissions",
					Description: `(Required) The specified permission for the role, team, or user. ` + "`" + `permissions` + "`" + ` is described in more detail below. ` + "`" + `permissions` + "`" + ` supports the following: The role, team, or user must be specified, but only one can be given for each ` + "`" + `permissions` + "`" + ` instance.`,
				},
				resource.Attribute{
					Name:        "role",
					Description: `(Optional) Used to control permissions for the ` + "`" + `Editor` + "`" + ` or ` + "`" + `Viewer` + "`" + ` roles`,
				},
				resource.Attribute{
					Name:        "team_id",
					Description: `(Optional) The ID of the team for which to control permissions`,
				},
				resource.Attribute{
					Name:        "user_id",
					Description: `(Optional) The ID of the user for which to control permissions`,
				},
				resource.Attribute{
					Name:        "permission",
					Description: `(Required) ` + "`" + `View` + "`" + `, ` + "`" + `Edit` + "`" + `, or ` + "`" + `Admin` + "`" + ` permissions ## Import Dashboard permissions cannot be imported.`,
				},
			},
			Attributes: []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "grafana_data_source",
			Category:         "Resources",
			ShortDescription: `The grafana_data_source resource allows a Grafana data source to be created.`,
			Description:      ``,
			Keywords: []string{
				"data",
				"source",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "type",
					Description: `(Required) The data source type. Must be one of the data source keywords supported by the Grafana server.`,
				},
				resource.Attribute{
					Name:        "name",
					Description: `(Required) A unique name for the data source within the Grafana server.`,
				},
				resource.Attribute{
					Name:        "url",
					Description: `(Optional) The URL for the data source. The type of URL required varies depending on the chosen data source type.`,
				},
				resource.Attribute{
					Name:        "is_default",
					Description: `(Optional) If true, the data source will be the default source used by the Grafana server. Only one data source on a server can be the default.`,
				},
				resource.Attribute{
					Name:        "basic_auth_enabled",
					Description: `(Optional) - If true, HTTP basic authentication will be used to make requests.`,
				},
				resource.Attribute{
					Name:        "basic_auth_username",
					Description: `(Required if ` + "`" + `basic_auth_enabled` + "`" + ` is true) The username to use for basic auth.`,
				},
				resource.Attribute{
					Name:        "basic_auth_password",
					Description: `(Required if ` + "`" + `basic_auth_enabled` + "`" + ` is true) The password to use for basic auth.`,
				},
				resource.Attribute{
					Name:        "username",
					Description: `(Required by some data source types) The username to use to authenticate to the data source.`,
				},
				resource.Attribute{
					Name:        "password",
					Description: `(Required by some data source types) The password to use to authenticate to the data source.`,
				},
				resource.Attribute{
					Name:        "json_data",
					Description: `(Required by some data source types) The default region and authentication type to access the data source. ` + "`" + `json_data` + "`" + ` is documented in more detail below.`,
				},
				resource.Attribute{
					Name:        "secure_json_data",
					Description: `(Required by some data source types) The access and secret keys required to access the data source. ` + "`" + `secure_json_data` + "`" + ` is documented in more detail below.`,
				},
				resource.Attribute{
					Name:        "database_name",
					Description: `(Required by some data source types) The name of the database to use on the selected data source server.`,
				},
				resource.Attribute{
					Name:        "access_mode",
					Description: `(Optional) The method by which the browser-based Grafana application will access the data source. The default is ` + "`" + `proxy` + "`" + `, which means that the application will make requests via a proxy endpoint on the Grafana server. Proxy is displayed in the Grafana admin as Server. Another possible value is ` + "`" + `direct` + "`" + ` which is displayed in the Grafana admin as Browser. JSON Data (` + "`" + `json_data` + "`" + `) supports the following: All fields are optional, though some data sources may need a subset of these fields to operate properly.`,
				},
				resource.Attribute{
					Name:        "assume_role_arn",
					Description: `(CloudWatch) The ARN of the role to be assumed by Grafana when using the CloudWatch data source.`,
				},
				resource.Attribute{
					Name:        "auth_type",
					Description: `(CloudWatch) The authentication type used to access the data source.`,
				},
				resource.Attribute{
					Name:        "authentication_type",
					Description: `(Stackdriver) The authentication type. 'jwt' or 'gce'`,
				},
				resource.Attribute{
					Name:        "client_email",
					Description: `(Stackdriver) Email address associated with [service account key](https://cloud.google.com/iam/docs/creating-managing-service-account-keys).`,
				},
				resource.Attribute{
					Name:        "conn_max_lifetime",
					Description: `(MySQL, PostgreSQL, and MSSQL) Maximum amount of time in seconds a connection may be reused (Grafana v5.4+).`,
				},
				resource.Attribute{
					Name:        "custom_metrics_namespaces",
					Description: `(CloudWatch) A comma-separated list of custom namespaces to be queried by the CloudWatch data source.`,
				},
				resource.Attribute{
					Name:        "default_project",
					Description: `(Stackdriver) The default project for the data source.`,
				},
				resource.Attribute{
					Name:        "default_region",
					Description: `(CloudWatch) The default region for the data source.`,
				},
				resource.Attribute{
					Name:        "encrypt",
					Description: `(MSSQL) Connection SSL encryption handling. 'disable', 'false' or 'true'`,
				},
				resource.Attribute{
					Name:        "es_version",
					Description: `(Elasticsearch) Elasticsearch version as a number (2/5/56/60/70).`,
				},
				resource.Attribute{
					Name:        "graphite_version",
					Description: `(Graphite) Graphite version`,
				},
				resource.Attribute{
					Name:        "http_method",
					Description: `(Prometheus) HTTP method to use for making requests.`,
				},
				resource.Attribute{
					Name:        "interval",
					Description: `(Elasticsearch) Index date time format. nil(No Pattern), 'Hourly', 'Daily', 'Weekly', 'Monthly' or 'Yearly'.`,
				},
				resource.Attribute{
					Name:        "log_level_field",
					Description: `(Elasticsearch) Which field should be used to indicate the priority of the log message.`,
				},
				resource.Attribute{
					Name:        "log_message_field",
					Description: `(Elasticsearch) Which field should be used as the log message.`,
				},
				resource.Attribute{
					Name:        "max_idle_conns",
					Description: `(MySQL, PostgreSQL and MSSQL) Maximum number of connections in the idle connection pool (Grafana v5.4+).`,
				},
				resource.Attribute{
					Name:        "max_open_conns",
					Description: `(MySQL, PostgreSQL and MSSQL) Maximum number of open connections to the database (Grafana v5.4+).`,
				},
				resource.Attribute{
					Name:        "postgres_version",
					Description: `(PostgreSQL) Postgres version as a number (903/904/905/906/1000) meaning v9.3, v9.4, …, v10.`,
				},
				resource.Attribute{
					Name:        "profile",
					Description: `(CloudWatch) The credentials profile name to use when authentication type is set as 'Credentials file'.`,
				},
				resource.Attribute{
					Name:        "query_timeout",
					Description: `(Prometheus) Timeout for queries made to the Prometheus data source in seconds.`,
				},
				resource.Attribute{
					Name:        "ssl_mode",
					Description: `(PostgreSQL) SSLmode. 'disable', 'require', 'verify-ca' or 'verify-full'.`,
				},
				resource.Attribute{
					Name:        "timescaledb",
					Description: `(PostgreSQL) Enable usage of TimescaleDB extension.`,
				},
				resource.Attribute{
					Name:        "time_field",
					Description: `(Elasticsearch) Which field that should be used as timestamp.`,
				},
				resource.Attribute{
					Name:        "time_interval",
					Description: `(Prometheus, Elasticsearch, InfluxDB, MySQL, PostgreSQL, and MSSQL) Lowest interval/step value that should be used for this data source.`,
				},
				resource.Attribute{
					Name:        "tls_auth",
					Description: `(All) Enable TLS authentication using client cert configured in secure json data.`,
				},
				resource.Attribute{
					Name:        "tls_auth_with_ca_cert",
					Description: `(All) Enable TLS authentication using CA cert.`,
				},
				resource.Attribute{
					Name:        "tls_skip_verify",
					Description: `(All) Controls whether a client verifies the server’s certificate chain and host name.`,
				},
				resource.Attribute{
					Name:        "token_uri",
					Description: `(Stackdriver) The token URI used, provided in the [service account key](https://cloud.google.com/iam/docs/creating-managing-service-account-keys).`,
				},
				resource.Attribute{
					Name:        "tsdb_resolution",
					Description: `(OpenTSDB) Resolution.`,
				},
				resource.Attribute{
					Name:        "tsdb_version",
					Description: `(OpenTSDB) Version. Secure JSON Data (` + "`" + `secure_json_data` + "`" + `) supports the following: All fields are optional, though some data sources may need a subset of these fields to operate properly.`,
				},
				resource.Attribute{
					Name:        "access_key",
					Description: `(CloudWatch) The access key to use to access the data source.`,
				},
				resource.Attribute{
					Name:        "basic_auth_password",
					Description: `(All) Password to use for basic authentication.`,
				},
				resource.Attribute{
					Name:        "password",
					Description: `(All) Password to use for authentication.`,
				},
				resource.Attribute{
					Name:        "private_key",
					Description: `(Stackdriver) The [service account key](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) ` + "`" + `private_key` + "`" + ` to use to access the data source.`,
				},
				resource.Attribute{
					Name:        "tls_ca_cert",
					Description: `(All) CA cert for out going requests.`,
				},
				resource.Attribute{
					Name:        "tls_client_cert",
					Description: `(All) TLS Client cert for outgoing requests.`,
				},
				resource.Attribute{
					Name:        "tls_client_key",
					Description: `(All) TLS Client key for outgoing requests.`,
				},
				resource.Attribute{
					Name:        "secret_key",
					Description: `(CloudWatch) The secret key to use to access the data source. ## Attributes Reference The resource exports the following attributes:`,
				},
				resource.Attribute{
					Name:        "id",
					Description: `The opaque unique id assigned to the data source by the Grafana server.`,
				},
			},
			Attributes: []resource.Attribute{
				resource.Attribute{
					Name:        "id",
					Description: `The opaque unique id assigned to the data source by the Grafana server.`,
				},
			},
		},
		&resource.Resource{
			Name:             "",
			Type:             "grafana_folder",
			Category:         "Resources",
			ShortDescription: `The grafana_folder resource allows a Grafana folder to be created.`,
			Description:      ``,
			Keywords: []string{
				"folder",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "title",
					Description: `(Required) The title of the folder. ## Attributes Reference The resource exports the following attributes:`,
				},
				resource.Attribute{
					Name:        "id",
					Description: `The internal id of the folder in Grafana (only guaranteed to be unique within this Grafana instance). The ` + "`" + `id` + "`" + ` is used by the ` + "`" + `grafana_dashboard` + "`" + ` resource to place a dashboard within a folder.`,
				},
				resource.Attribute{
					Name:        "uid",
					Description: `An external id of the folder in Grafana (stable when folders are migrated between Grafana instances). The ` + "`" + `uid` + "`" + ` is required by several Grafana Folder APIs. ## Import Existing folders can be imported using the folder "id" which can be obtained from Grafana database or inspecting requests in folder (e.g. ` + "`" + `https://grafana.mydomain.com/f/abcdef-gh/folder-title` + "`" + `) ` + "`" + `` + "`" + `` + "`" + ` $ terraform import grafana_folder.folder_name {folder_id} ` + "`" + `` + "`" + `` + "`" + ``,
				},
			},
			Attributes: []resource.Attribute{
				resource.Attribute{
					Name:        "id",
					Description: `The internal id of the folder in Grafana (only guaranteed to be unique within this Grafana instance). The ` + "`" + `id` + "`" + ` is used by the ` + "`" + `grafana_dashboard` + "`" + ` resource to place a dashboard within a folder.`,
				},
				resource.Attribute{
					Name:        "uid",
					Description: `An external id of the folder in Grafana (stable when folders are migrated between Grafana instances). The ` + "`" + `uid` + "`" + ` is required by several Grafana Folder APIs. ## Import Existing folders can be imported using the folder "id" which can be obtained from Grafana database or inspecting requests in folder (e.g. ` + "`" + `https://grafana.mydomain.com/f/abcdef-gh/folder-title` + "`" + `) ` + "`" + `` + "`" + `` + "`" + ` $ terraform import grafana_folder.folder_name {folder_id} ` + "`" + `` + "`" + `` + "`" + ``,
				},
			},
		},
		&resource.Resource{
			Name:             "",
			Type:             "grafana_folder_permission",
			Category:         "Resources",
			ShortDescription: `The grafana_folder_permission resource allows a Grafana folder's permissions to be maintained`,
			Description:      ``,
			Keywords: []string{
				"folder",
				"permission",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "folder_uid",
					Description: `(Required) The UID of the folder`,
				},
				resource.Attribute{
					Name:        "permissions",
					Description: `(Required) The specified permission for the role, team, or user. ` + "`" + `permissions` + "`" + ` is described in more detail below. ` + "`" + `permissions` + "`" + ` supports the following: The role, team, or user must be specified, but only one can be given for each ` + "`" + `permissions` + "`" + ` instance.`,
				},
				resource.Attribute{
					Name:        "role",
					Description: `(Optional) Used to control permissions for the ` + "`" + `Editor` + "`" + ` or ` + "`" + `Viewer` + "`" + ` roles`,
				},
				resource.Attribute{
					Name:        "team_id",
					Description: `(Optional) The ID of the team for which to control permissions`,
				},
				resource.Attribute{
					Name:        "user_id",
					Description: `(Optional) The ID of the user for which to control permissions`,
				},
				resource.Attribute{
					Name:        "permission",
					Description: `(Required) ` + "`" + `View` + "`" + `, ` + "`" + `Edit` + "`" + `, or ` + "`" + `Admin` + "`" + ` permissions ## Import Folder permissions cannot be imported.`,
				},
			},
			Attributes: []resource.Attribute{},
		},
		&resource.Resource{
			Name:             "",
			Type:             "grafana_organization",
			Category:         "Resources",
			ShortDescription: `The grafana_organization resource allows a Grafana organization to be created.`,
			Description:      ``,
			Keywords: []string{
				"organization",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "name",
					Description: `(Required) The display name for the Grafana organization created.`,
				},
				resource.Attribute{
					Name:        "admin_user",
					Description: `(Optional) The login name of the configured [default admin user](http://docs.grafana.org/installation/configuration/#admin-user) for the Grafana installation. If unset, this value defaults to ` + "`" + `admin` + "`" + `, the Grafana default. Grafana adds the default admin user to all organizations automatically upon creation, and this parameter keeps Terraform from removing it from organizations.`,
				},
				resource.Attribute{
					Name:        "create_users",
					Description: `(Optional) Whether or not to create Grafana users specified in the organization's membership if they don't already exist in Grafana. If unspecified, this parameter defaults to ` + "`" + `true` + "`" + `, creating placeholder users with the ` + "`" + `name` + "`" + `, ` + "`" + `login` + "`" + `, and ` + "`" + `email` + "`" + ` set to the email of the user, and a random password. Setting this option to ` + "`" + `false` + "`" + ` will cause an error to be thrown for any users that do not already exist in Grafana. This option is particularly useful when integrating Grafana with external authentication services such as [` + "`" + `auth.github` + "`" + `](http://docs.grafana.org/installation/configuration/#auth-github) and [` + "`" + `auth.google` + "`" + `](http://docs.grafana.org/installation/configuration/#auth-google).`,
				},
				resource.Attribute{
					Name:        "admins",
					Description: `(Optional) A list of email addresses corresponding to users who should be given ` + "`" + `admin` + "`" + ` access to the organization. Note: users specified here must already exist in Grafana unless 'create_users' is set to true.`,
				},
				resource.Attribute{
					Name:        "editors",
					Description: `(Optional) A list of email addresses corresponding to users who should be given ` + "`" + `editor` + "`" + ` access to the organization. Note: users specified here must already exist in Grafana unless 'create_users' is set to true.`,
				},
				resource.Attribute{
					Name:        "viewers",
					Description: `(Optional) A list of email addresses corresponding to users who should be given ` + "`" + `viewer` + "`" + ` access to the organization. Note: users specified here must already exist in Grafana unless 'create_users' is set to true. A user can only be listed under one role-group for an organization, listing the same user under multiple roles will cause an error to be thrown. ## Attributes Reference The following attributes are exported:`,
				},
				resource.Attribute{
					Name:        "org_id",
					Description: `The organization id assigned to this organization by Grafana. ## Import Existing organizations can be imported using the organization id obtained from the Grafana Web UI under 'Server Admin'. ` + "`" + `` + "`" + `` + "`" + ` $ terraform import grafana_organization.org_name {org_id} ` + "`" + `` + "`" + `` + "`" + ``,
				},
			},
			Attributes: []resource.Attribute{
				resource.Attribute{
					Name:        "org_id",
					Description: `The organization id assigned to this organization by Grafana. ## Import Existing organizations can be imported using the organization id obtained from the Grafana Web UI under 'Server Admin'. ` + "`" + `` + "`" + `` + "`" + ` $ terraform import grafana_organization.org_name {org_id} ` + "`" + `` + "`" + `` + "`" + ``,
				},
			},
		},
		&resource.Resource{
			Name:             "",
			Type:             "grafana_team",
			Category:         "Resources",
			ShortDescription: `The grafana_team resource allows a Grafana team to be created.`,
			Description:      ``,
			Keywords: []string{
				"team",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "name",
					Description: `(Required) The display name for the Grafana team created.`,
				},
				resource.Attribute{
					Name:        "email",
					Description: `(Optional) An email address for the team.`,
				},
				resource.Attribute{
					Name:        "members",
					Description: `(Optional) A list of email addresses corresponding to users who should be given membership to the team. Note: users specified here must already exist in Grafana. Note - Users should be listed in ascending alphabetical order (A-Z). By defining users in alphabetical order, Terraform is prevented from detecting unnecessary changes when comparing the list of defined users in the resource to the (ordered) list returned by the Grafana API. ## Attributes Reference The following attributes are exported:`,
				},
				resource.Attribute{
					Name:        "team_id",
					Description: `The team id assigned to this team by Grafana. ## Import Existing teams can be imported using the team id. Currently this value is only available via the [` + "`" + `http api` + "`" + `](https://grafana.com/docs/grafana/latest/http_api/team/). ` + "`" + `` + "`" + `` + "`" + ` $ terraform import grafana_team.name {team_id} ` + "`" + `` + "`" + `` + "`" + ``,
				},
			},
			Attributes: []resource.Attribute{
				resource.Attribute{
					Name:        "team_id",
					Description: `The team id assigned to this team by Grafana. ## Import Existing teams can be imported using the team id. Currently this value is only available via the [` + "`" + `http api` + "`" + `](https://grafana.com/docs/grafana/latest/http_api/team/). ` + "`" + `` + "`" + `` + "`" + ` $ terraform import grafana_team.name {team_id} ` + "`" + `` + "`" + `` + "`" + ``,
				},
			},
		},
		&resource.Resource{
			Name:             "",
			Type:             "grafana_team_preferences",
			Category:         "Resources",
			ShortDescription: `The grafana_team_preferences resource allows Team Preferences to be maintained.`,
			Description:      ``,
			Keywords: []string{
				"team",
				"preferences",
			},
			Arguments: []resource.Attribute{
				resource.Attribute{
					Name:        "team_id",
					Description: `(Required) The numeric team ID.`,
				},
				resource.Attribute{
					Name:        "theme",
					Description: `(Optional) The theme for the specified team. Available themes are ` + "`" + `light` + "`" + `, ` + "`" + `dark` + "`" + `, or an empty string for the default theme.`,
				},
				resource.Attribute{
					Name:        "timezone",
					Description: `(Optional) The timezone for the specified team. Available values are ` + "`" + `utc` + "`" + `, ` + "`" + `browser` + "`" + `, or an empty string for the default.`,
				},
				resource.Attribute{
					Name:        "home_dashboard_id",
					Description: `(Optional) The numeric ID of the dashboard to display when a team member logs in. ## Import Team preferences cannot be imported.`,
				},
			},
			Attributes: []resource.Attribute{},
		},
	}

	resourcesMap = map[string]int{

		"grafana_alert_notification":   0,
		"grafana_dashboard":            1,
		"grafana_dashboard_permission": 2,
		"grafana_data_source":          3,
		"grafana_folder":               4,
		"grafana_folder_permission":    5,
		"grafana_organization":         6,
		"grafana_team":                 7,
		"grafana_team_preferences":     8,
	}
)

func GetResource(r string) (*resource.Resource, error) {
	rs, ok := resourcesMap[r]
	if !ok {
		return nil, fmt.Errorf("resource %q not found", r)
	}
	return Resources[rs], nil
}
